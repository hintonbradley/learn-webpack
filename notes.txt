Tutorial: https://www.youtube.com/watch?v=3On5Z0gjf4U&list=PLblA84xge2_zwxh3XJqy6UVxS60YdusY8

What is webpack? 
A very configurable program that not only bundles-takes various different files (.png, .js, .css, etc) and bundles them into a smaller group of files, but it also manages dependencies-allowing files to be added where needed in your app.

Step 1: Initialize npm (create a package.json file)
    $ npm init -y
Step 2: Add a .gitignore file and add node_modules to gitignore file.
    node_modules
Step 3: Install webpack and webpack-cli as development dependencies
    $ npm i webpack webpack-cli --save-dev
Step 4: Add start script to the package.json file.
    "scripts": {
        "start": "webpack"
    },
    ...
Step 5: Create a default entrypoint (main.js) in .src folder
    console.log('hello from webpack');
Step 6: Create a dist folder in the root directory
Step 7: In the index.html file, add a script requiring the main.js file in dist folder.
    <script src="./dist/main.js"></script>
Step 8: Add dist folder to .gitignore file
    node_modules
    dist
Step 9: Add all your dependencies to the index.js file so webpack can recognize and fetch from your app. (This is if we are not creating a separate config file - if no config file is created webpack automatically only looks in the index.js file for what to fetch.)
    import { run } from "./app/app";
    import { AlertService } from "./app/alert.service";
    import { ComponentService } from "./app/component.service";
    const alertService = new AlertService();
    const componentService = new ComponentService();
    run(alertService, componentService);
Step 10: To configure webpack, create a webpack.config.js file in the root folder and require path module.
    const path - require("path");
Step 11: Add following code to webpack.config.js file.
    // mode - default is production. if you want to run in development, you must add this key value (mode: development)
    // entry - an entrypoint for webpack to access your application
    // output - the file where the code should be outputted after webpack has completed compiling
    // path - node module allowing the application to create a file in a specific path wherever it's hosted.
    module.exports = {
        mode: "development"
        entry: "./src/index.js",
        output: {
            filename: 'main.js',
            path: path.resolve(__dirname, "dist")
        }
    }
Step 12: To write CSS, create a main.css file in your src folder, and write some styling.
Step 13: Install your loader necessary for CSS
    $ npm install --save-dev style-loader css-loader
Step 14: Add a loader for you CSS in your webpack.config.js file.
    module: {
        rules: [
            {
                test: /\.css$/,
                use: ["css-loader"]
            }
        ]
    }
Step 15: Make sure webpack knows about the css file by adding it to the index.js file.
    ...
    import { run } from "./app/app";
    import "./main.css";
    ...
Step 16: Add style-loader to your webpack.config.js file in order to take the css file that has been translated to javascript and add it to the DOM. Note: style-loader must come before css-loader in the array since webpack imports elements in reverse order.

Step 17: In order to use caching to our advantage (via html) we need to download the html-webpack-plugin
    $ npm install --save-dev html-webpack-plugin
Step 18: Require the plugin in your webpack.config.js file.
    const HtmlWebpackPlugin = require('html-webpack-plugin');
Step 19: Add your configuration for this plugin to the config file.
    plugins: [new HtmlWebpackPlugin()],
Step 20: Add a template file in the src folder.

Step 21: Copy and paste code from index.html from root folder into the new template.html file in src folder. Be sure to delete the <script src="./dist/main.js"></script> line as it's no longer needed - wepback will now rewrite this line each time a change is made to the main.js file.

Step 22: In the config file, add configuration to the plugin so wepback recognizes which file to use as a template.

Step 23: In the config file, update the output value:pair so that it adds the hash created by webpack to the html file.
    ...
    filename: 'main.[contentHash].js',
    ...

*************************
*** DEV & PROD CONFIG ***
*************************
Step 24: Create two more config files in your root folder (webpack.dev.js and webpack.prod.js)
Step 25: Copy webpack.config.js code into both new config files
Step 26: Update the mode in each new file to match the name.
    mode: "development",
    &
    mode: "production",
Step 27: Change name of webpack.config.js to webpack.common.js
Step 28: In webpack.common.js file, remove the following:
    mode: "development",
    &
    output: {
        filename: 'main.[contentHash].js',
        path: path.resolve(__dirname, "dist")
    },
Step 29: In webpack.dev.js file, update the code so it looks like this (complete):
    const path = require("path");
    module.exports = {
        mode: "development",
        output: {
            filename: 'main.js',
            path: path.resolve(__dirname, "dist")
        },
    }
Step 30: In webpack.prod.js file, update the code so it looks like this (complete):
    const path = require("path");
    module.exports = {
        mode: "production",
        output: {
            filename: 'main.[contentHash].js',
            path: path.resolve(__dirname, "dist")
        }
    }
Step 31: In webpack.common.js file, keep all the code that is used by both prod and dev config files.
    const path = require("path");
    var HtmlWebpackPlugin = require('html-webpack-plugin');

    // mode - default is production. if you want to run in development, you must add this key value (mode: development)
    // entry - an entrypoint for webpack to access your application
    // output - the file where the code should be outputted after webpack has completed compiling
    // path - node module allowing the application to create a file in a specific path wherever it's hosted.
    module.exports = {
        entry: "./src/index.js",
        plugins: [new HtmlWebpackPlugin({
            template: "./src/template.html"
        })],
        module: {
            rules: [
                {
                    test: /\.css$/,
                    use: ["style-loader","css-loader"]
                }
            ]
        }
    }
Step 32: In order to combine code from common and dev or prod, we need to install webpack-merge.
    $ npm i --save-dev webpack-merge
Step 33: Import common config file and webpack-merge into the dev and prod config files.
    const common = require('./wepback.common');
    const merge = require('webpack-merge');
Step 34: In your dev and prod config files, set module.exports to be a function call of merge with common as a parameter and the original object as the second parameter.
    module.exports = merge(common, {
        mode: ...
    });
Step 35: To tell webpack which config files to use, update the scripts in your package.json file.
    ...
    "scripts": {
        "start": "webpack --config webpack.dev.js",
        "build": "webpack --config webpack.prod.js"
    },
    ...
Step 36: Confirm dev is running correctly with npm start, and the dist/index.html file should only have main.js in the script. Additionally, that script in the dist folder should NOT be minified.
    $ npm start
Step 37: Confirm prod is running correctly with npm run build, and the dist/index.html file should have main[string].js in the script. Additionally, that script in the dist folder should be minified.

Step 38: Set up a dev server by first installing webpack-dev-server.
    $ npm i --save-dev webpack-dev-server
Step 39: In your package.json file update the start script.
    "start": "webpack-dev-server --config webpack.dev.js --open",
Step 40: Confirm that a browser will open once you run npm start - changes should update the server instnatly.
    $ npm start

***********
** Loaders and assets **
***********
Step 41: To make sure assets are put in the dist folder when we build the app, we first need to move the assets folder in the src directory.
Step 42: After you moved the assets folder make sure the link is correct in your template.html file. 
    <img src="./assets/webpack.svg" />
Step 43: Install html-loader in order to load your html file during builds.
    $ npm i --save-dev html-loader
Step 44: Add the new rule to your common.config file.
    {
        test: /\html$/,
        use: ["html-loader"]
    }
Step 45: In order to the browser to go through and parse the image files, you'll need to install file-loader.
    $ npm i --save-dev file-loader
Step 46: Add your new file-loader rule in common.config file. Note: we're taking all image files (svg, png, jpg, etc) and using file-loader to bring them into our dist folder while naming them by each one's [name], and then adding a [hash], and finally using the file [ext]ention. Finally, we're putting them all in imgs folder in dist.
    {
        test:/\.(svg|png|jpg|gif)$/,
        use: {
            loader: "file-loader",
            options: {
                name: "[name].[hash].[ext]",
                outputPath: "imgs"
            }
        }
    }
Step 47: Confirm the new imgs folder is in dist folder and that the image files are named correctly with the hash in the index.html file in dist. 

****************************
*** CLEAN WEBPACK PLUGIN ***
****************************
Step 48: In order to prevent multiple versions of files being created in our dist folder, we need to use clean webpack plugin. 
    $ npm i clean-webpack-plugin --save-dev
Step 49: In your prod.config file, import the dependency.
    const { CleanWebpackPlugin } = require('clean-webpack-plugin');
Step 50: In your prod.config file, add an instance of it under 'plugins'.
    plugins: [new CleanWebpackPlugin()]

*******************************
*** SEPARATING VENDOR FILES ***
*******************************
Step 51: Create a new vendor.js file in src folder, and write some code so you can test it.
Step 52: In your common.config file to update your entry points. Instead of a string, change entry to an object.
    entry: {
        main: "./src/index.js",
        vendor: "./src/vendor.js"
    }...
Step 53: Additionally, change your file names to [name] in the common.config file.
    webpack.prod.js:
        filename: '[name].[contentHash].bundle.js',

    webpack.dev.js:
        filename: '[name].bundle.js',
Step 54: Start your server and confirm you now have two files (main and vendor) in your sources tab, and confirm both can be found as scripts in the html file. 
Step 55: Install bootstrap and delete the cdn from your html file.
    $ npm i --s bootstrap
Step 56: Install sass-loader and node-sass
    $ npm i --save-dev sass-loader node-sass
Step 57: Create a new rule for SASS in config file.
    {
        test: /\.scss$/,
        use: ["style-loader","css-loader","sass-loader"]
    },
Step 58: Add a new scss file in the src folder and import bootstrap scss.
    @import "~bootstrap/scss/bootstrap";
Step 60: In the vendor.js file, import the main.scss file.
Step 61: Run build and confirm that bootstrap is indeed imported. 
Step 62: Remove your css and put translate it into SASS.
Step 63: To add bootstrap js, add a bootstrap component that requires js into your html.
Step 64: In your vendor.js file, import bootstrap.
    import 'bootstrap';
Step 65: Install jquery and popper as required by Bootstrap.
    $ npm install --save jquery popper.js.
Step 66: Rebuild your app and test that the bootstrap component is working.

************************
*** EXTRACT & MINIFY ***
************************

Step 67: To extract your CSS so it can be loaded into the DOM before page ready, we need to install mini-css-extract-plugin
    $ npm i --save-dev mini-css-extract-plugin
Step 68: In your prod.config file, require the plugin, and add the configurization to the code.
    const MiniCssExtractPlugin = require("mini-css-extract-plugin");
    ...
    plugins: [ new MiniCssExtractPlugin({filename: "[name].[contentHash].css"}), new CleanWebpackPlugin() ]
    ...
Step 69: Instead of using style-loader in the common config file, we should instead use the new plugin to transform our css into a file that can be imported into our html in the head. So copy the scss code from common and place it into the dev config file since we don't need to import our css immediately in development. 
    {
        test: /\.scss$/,
        use: ["style-loader","css-loader","sass-loader"]
    },
Step 70: In prod config add the code, but instead of style-loader, use MiniCssExtractPlugin.loader
    module: {
        rules: [
            {
                test: /\.scss$/,
                use: ["MiniCssExtractPlugin.loader","css-loader","sass-loader"]
            }
        ]
    }
Step 71: In order to minify our CSS we first need to install optimize-css-assets-webpack-plugin.
    $ npm i --save-dev optimize-css-assets-webpack-plugin
Step 72: Since we only minimize css in production, import it into the prod.config file.
    const OptimizeCssAssetsPlugin = require("optimize-css-assets-webpack-plugin");
Step 73: In the prod.config file, add a new property of optimization, and add your code for css minification.
    optimization: {
        minimizer: [ new OptimizeCssAssetsPlugin() ]
    },
Step 74: Since the minification property is overwritten, we need to add our javascript minifyer back in. In the prod.config file, require terser-webpack-plugin.
    const TerserPlugin = require("terser-webpack-plugin");
Step 75: Pass it in as a minimizer in prod.config.
    optimization: {
        minimizer: [ new OptimizeCssAssetsPlugin(), new TerserPlugin() ]
    },

**********************
*** MINIFYING HTML ***
**********************

Step 76: In the common.config file, copy and remove the following lines:
    plugins: [new HtmlWebpackPlugin({
        template: "./src/template.html"
    })],
Step 77: Take the copied code and move it into the dev.config file-we don't need to minify our html in development environment.
    plugins: [new HtmlWebpackPlugin({
        template: "./src/template.html"
    })],
Step 78: And also require the plugin in dev.config file (remove the requirement from common).
    var HtmlWebpackPlugin = require('html-webpack-plugin');
Step 79: In prod.config file, require the plugin and add code for minimizing html.
    var HtmlWebpackPlugin = require('html-webpack-plugin');
    ...
    minimizer: [ new OptimizeCssAssetsPlugin(), new TerserPlugin(), new HtmlWebpackPlugin({
        template: "./src/template.html",
        minify: {
            removeAttributeQuotes: true,
            collapseWhitespace: true,
            removeComments: true
    }})]
End
